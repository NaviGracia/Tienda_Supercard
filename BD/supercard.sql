-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

CREATE TABLE IF NOT EXISTS public.carta
(
    n_carta integer PRIMARY KEY,
    nombre character varying(50),
    categoria character varying(30),
	precio double precision,
	stock integer,
	CONSTRAINT fk_categoria_carta FOREIGN KEY(categoria) REFERENCES categoria(categoria)
);

CREATE OR REPLACE TRIGGER establecer_stock_carta
AFTER INSERT ON carta
FOR EACH ROW
EXECUTE FUNCTION establecer_stock();

CREATE OR REPLACE FUNCTION establecer_stock()
RETURNS TRIGGER AS $$
BEGIN
UPDATE carta SET stock = 100 WHERE n_carta = NEW.n_carta;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM catalogo_cartas

/*------------------------------------------------------------------------------------*/

CREATE TABLE IF NOT EXISTS public.catalogo_cartas
(
	n_carta integer PRIMARY KEY,
	nombre character varying(50),
    precio double precision,
	stock integer,
	categoria varchar(30),
	CONSTRAINT fk_n_carta FOREIGN KEY(n_carta) REFERENCES carta(n_carta)
);

CREATE OR REPLACE FUNCTION registrar_catalogo()
RETURNS TRIGGER AS $$
BEGIN
INSERT INTO catalogo_cartas VALUES(NEW.n_carta, NEW.nombre, NEW.precio, 100, NEW.categoria);
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER registrar_nuevo_producto_catalogo
AFTER INSERT ON carta
FOR EACH ROW
EXECUTE FUNCTION registrar_catalogo();

CREATE OR REPLACE FUNCTION eliminar_carta_catalogo()
RETURNS TRIGGER AS $$
BEGIN
DELETE FROM catalogo_cartas WHERE n_carta = OLD.n_carta;
RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER eliminar_producto_catalogo
BEFORE DELETE ON carta
FOR EACH ROW
EXECUTE FUNCTION eliminar_carta_catalogo();

CREATE OR REPLACE FUNCTION actualizar_stock()
RETURNS TRIGGER AS $$
BEGIN
UPDATE catalogo_cartas SET stock = NEW.stock WHERE n_carta = NEW.n_carta;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER actualizar_stock_catalogo
AFTER UPDATE ON carta
FOR EACH ROW
EXECUTE FUNCTION actualizar_stock();


/*------------------------------------------------------------------------------------*/
CREATE TABLE IF NOT EXISTS public.luchador(
	n_carta integer PRIMARY KEY,
	fuerza int,
	resistencia int,
	velocidad int,
	carisma int,
	CONSTRAINT fk_n_carta_carta FOREIGN KEY (n_carta) REFERENCES carta(n_carta)
);

CREATE OR REPLACE FUNCTION eliminar_luchador()
RETURNS TRIGGER AS $$
BEGIN
	IF EXISTS(SELECT n_carta FROM luchador WHERE n_carta = OLD.n_carta) THEN
		DELETE FROM luchador WHERE n_carta = OLD.n_carta;
	END IF;
RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER eliminar_luchador
BEFORE DELETE ON carta
FOR EACH ROW
EXECUTE FUNCTION eliminar_luchador();

/*------------------------------------------------------------------------------------*/

CREATE TABLE IF NOT EXISTS public.categoria(
	categoria varchar(30) PRIMARY KEY,
	fecha_lanzamiento varchar(40)
);

INSERT INTO categoria VALUES('Wrestlemania 40', '2024-03-27');
INSERT INTO categoria VALUES('Royal Rumble 24', '2024-01-24');
INSERT INTO categoria VALUES('Tundra', '2023-12-20');

/*------------------------------------------------------------------------------------*/

CREATE TABLE IF NOT EXISTS public.cuenta_banco(
	numero_cuenta varchar(30) PRIMARY KEY,
	dinero double precision 
);
